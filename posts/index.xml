<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on Khaled Nassar</title><link>https://www.knas.me/posts/</link><description>Recent content in Posts on Khaled Nassar</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 17 Aug 2022 20:15:30 +0200</lastBuildDate><atom:link href="https://www.knas.me/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>How to Secure your API Gateway</title><link>https://www.knas.me/posts/how-to-secure-your-api-gateway/</link><pubDate>Wed, 17 Aug 2022 20:15:30 +0200</pubDate><guid>https://www.knas.me/posts/how-to-secure-your-api-gateway/</guid><description>Hello Everyone, if you have an API you will need to make a good security practice for it so we will discuss in this blog about
How to choose the best option for authentication How to make a secure connection between each service In the beginning, let’s imagine that you have a micro-service and all it does is that display some information about the user such as the username, job role, and email address some options are available to us to use to Secure Our API Gateway, Most of them are usable and we will use them one by one indifferent cases</description><content type="html"><![CDATA[<p>Hello Everyone, if you have an API you will need to make a good security
practice for it so we will discuss in this blog about</p>
<ul>
<li>How to choose the best option for authentication</li>
<li>How to make a secure connection between each service</li>
</ul>
<hr>
<p>In the beginning, let’s imagine that you have a micro-service and all it does
is that display some information about the user such as the username, job role,
and email address some options are available to us to use to Secure Our API
Gateway, Most of them are usable and we will use them one by one indifferent
cases</p>
<ul>
<li>
<p>Basic Authentication<br>
This Protocole is one of the HTTP/1.0 <a href="https://www.rfc-editor.org/rfc/rfc1945.html#section-11.1">RFC 1945</a> a long time back, this Protoco lets you access your
micro-service using an HTTP header, the user will send the username and password
(base64 encoded) in the header</p>
</li>
<li>
<p>Mutual TLS (MTLS)<br>
Mutual Transport Layer Security is a mechanism by which a client application verifies
a server and the server verifies the client application by exchanging respective certifi-
cates and proving that each one owns the corresponding private keys</p>
</li>
<li>
<p>OAuth 2.0<br>
OAuth 2.0 is the industry-standard protocol for authorization. OAuth 2.0 focuses on client developer simplicity while providing specific authorization flows for web applications, desktop applications, mobile phones, and living room devices. This specification and its extensions are being developed within the IETF OAuth Working Group.</p>
</li>
</ul>
<h4 id="-choose-the-right-api-authentication-protocole">&raquo; Choose The Right API authentication Protocole</h4>
<ul>
<li>
<p>Basic Authentication<br>
why is this choice bad for your API?</p>
<ul>
<li>
<p>the username and password are long-living credentials<br>
if a user provides a username and password to an application, the
application needs to retain this information for that particular user
session to access the microservices. The time during which this
information needs to be retained could be as long as the application
decide, Therefore if a basic authentication is used, the application has
to retain this information for long durations of time. The longer this
information is retained, the higher the chance of compromise. And
because these credentials rarely change, a compromise of this
information could have severe consequences.</p>
</li>
<li>
<p>No restrictions on what the application can do<br>
After an application gets access to the
username and password of a user, it can do everything that the user can do with the
microservice. In addition to accessing the microservice, the application can do
anything with those credentials, even on other systems</p>
</li>
</ul>
</li>
<li>
<p>Mutual TLS (MTLS)<br>
This is a Good Protocole to use, all it does is verify the Cert Key between the server and client, this type of protocol has an Expire option so this solves the problem that we&rsquo;ve with the Basic Authentication Header, but this is not the best choice for the API (or the end-user), it&rsquo;s like taking a seaplane to float on the water
it will work but it would be better if you take a Sea Boat because it&rsquo;s designed for this only and it&rsquo;s faster
we will use it later to secure the connection between the API-Gateway and the microservices</p>
</li>
<li>
<p>Auth 2.0 (Use ME)<br>
To understand why OAuth 2.0 is <strong>the best security protocol</strong> for you, first you need to understand your audience.
You need to figure out</p>
<ul>
<li>who wants access to your resources</li>
<li>for what purpose</li>
<li>for how long<br>
Auth 2.0 provides all of these requirements, so we can use it instead of HTTP/1.0 Basic Authentication or MTLS\</li>
</ul>
</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>$ curl -u application1:application1secret <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>-H <span style="color:#e6db74">&#34;Content-Type: application/x-www-form-urlencoded&#34;</span> <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>-d <span style="color:#e6db74">&#34;grant_type=client_credentials&#34;</span> <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>http://localhost:9090/token/oauth/token | jq
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;access_token&#34;</span>:<span style="color:#e6db74">&#34;47190af1-624c-48a6-988d-f4319d36b7f4&#34;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;token_type&#34;</span>:<span style="color:#e6db74">&#34;bearer&#34;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;expires_in&#34;</span>:3599
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Check Permission</span>
</span></span><span style="display:flex;"><span>$ curl http://localhost:9090/oauth/check_token -H <span style="color:#e6db74">&#34;Authorization: Basic YXBwbGljYXRpb24xOmFwcGxpY2F0aW9uMXNlY3JldA==&#34;</span> -d <span style="color:#e6db74">&#34;token=626e34e6-002d-4d53-9656-9e06a5e7e0dc&amp;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">token_type_hint=access_token&#34;</span> | jq
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;active&#34;</span>: true,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;client_id&#34;</span>: <span style="color:#e6db74">&#34;application1&#34;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;scope&#34;</span>: <span style="color:#e6db74">&#34;read write&#34;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;sub&#34;</span>: <span style="color:#e6db74">&#34;application1&#34;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;aud&#34;</span>: <span style="color:#e6db74">&#34;http://orders.ecomm.com&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div><h4 id="secure-the-connection">Secure the connection</h4>
<p>in the example at the beginning of the post, we have two microservices one for Authentication and another for Ordering User Data and you already using Auth 2.0 on your application, but we still need to make the last steps to make sure that no one outside the API-Gateway can access any of the microservices</p>
<p>first, we will make a Firewall rule to block any External requests, Also we&rsquo;ll use Mutual TLS (MTLS) to block any Internal requests</p>
<p><img src="/images/micro.svg" alt="micro_png"></p>
<p>this was a Quick summary of microservices Security in Action Book (Part 2)
follow the RSS to see more posts about this book (Chapter by Chapter)</p>
]]></content></item><item><title>SQL inection on gdclive.nokia.com</title><link>https://www.knas.me/posts/sql-inection-on-gdclive.nokia.com/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.knas.me/posts/sql-inection-on-gdclive.nokia.com/</guid><description>Hi, this blog about SQL Injection in Nokia.com Allowed me to Dump all database
Full POC : when I&amp;rsquo;m visiting this domain gdclive.nokia.com I&amp;rsquo;ve found something
First: this domain has been used an old version of Joomla CMS
let&amp;rsquo;s scan it using the joomscan tool for dumping all pieces of information about Joomla (plugins, version, etc..)
All results :
Joomla Version: 3.1 Plugins: JCK Editor (6.4.4) searching for JCK Editor in exploit-db.</description><content type="html"><![CDATA[<p>Hi, this blog about SQL Injection in Nokia.com Allowed me to Dump all database</p>
<h3 id="full-poc-">Full POC :</h3>
<p>when I&rsquo;m visiting this domain gdclive.nokia.com I&rsquo;ve found something</p>
<p>First: this domain has been used an old version of Joomla CMS</p>
<p>let&rsquo;s scan it using the joomscan tool for dumping all pieces of information about Joomla (plugins, version, etc..)</p>
<p>All results :</p>
<pre tabindex="0"><code>Joomla Version: 3.1
Plugins: JCK Editor (6.4.4)
</code></pre><p>searching for JCK Editor in exploit-db.com
and I&rsquo;ve found this exploit <a href="https://www.exploit-db.com/exploits/45423">https://www.exploit-db.com/exploits/45423</a>
let&rsquo;s exploit it :D</p>
<!-- raw HTML omitted -->
<p>Worked ..!
you can see the version of the database :D</p>
<p>this is the time of SQLMAP Tool</p>
<!-- raw HTML omitted -->
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>$ sqlmap -u <span style="color:#e6db74">&#39;https://gdclive.nokia.com/plugins/editors/jckeditor/plugins/jtreelink/dialogs/links.php?extension=menu&amp;view=menu&amp;parent=&#39;</span> --level<span style="color:#f92672">=</span><span style="color:#ae81ff">5</span> --risk<span style="color:#f92672">=</span><span style="color:#ae81ff">3</span> --random-agent --technique<span style="color:#f92672">=</span>U -p parent --batch --current-db --current-user
</span></span></code></pre></div><!-- raw HTML omitted -->
<p>you can see the current user and the name of the database :)
After dumping all databases using the <code>--all</code> option and unencrypt the password of the admin account let&rsquo;s login in admin panel</p>
<!-- raw HTML omitted -->
<p>You can see this <!-- raw HTML omitted -->video<!-- raw HTML omitted --> about this bug</p>
<!-- raw HTML omitted -->
<p>Thanks ;0</p>
]]></content></item></channel></rss>