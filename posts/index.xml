<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on Khaled Nassar</title><link>https://www.knas.me/posts/</link><description>Recent content in Posts on Khaled Nassar</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 17 Aug 2022 20:15:30 +0200</lastBuildDate><atom:link href="https://www.knas.me/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>How to Secure your API Gateway</title><link>https://www.knas.me/posts/how-to-secure-your-api-gateway/</link><pubDate>Wed, 17 Aug 2022 20:15:30 +0200</pubDate><guid>https://www.knas.me/posts/how-to-secure-your-api-gateway/</guid><description>Hello Everyone, if you have an API you will need to make a good security practice for it so we will discuss in this blog about
How to choose the best option for authentication How to make a secure connection between each service In the beginning, let’s imagine that you have a micro-service and all it does is that display some information about the user such as the username, job role, and email address some options are available to us to use to Secure Our API Gateway, Most of them are usable and we will use them one by one indifferent cases</description><content type="html"><![CDATA[<p>Hello Everyone, if you have an API you will need to make a good security
practice for it so we will discuss in this blog about</p>
<ul>
<li>How to choose the best option for authentication</li>
<li>How to make a secure connection between each service</li>
</ul>
<hr>
<p>In the beginning, let’s imagine that you have a micro-service and all it does
is that display some information about the user such as the username, job role,
and email address some options are available to us to use to Secure Our API
Gateway, Most of them are usable and we will use them one by one indifferent
cases</p>
<ul>
<li>
<p>Basic Authentication<br>
This Protocole is one of the HTTP/1.0 <a href="https://www.rfc-editor.org/rfc/rfc1945.html#section-11.1">RFC 1945</a> a long time back, this Protoco lets you access your
micro-service using an HTTP header, the user will send the username and password
(base64 encoded) in the header</p>
</li>
<li>
<p>Mutual TLS (MTLS)<br>
Mutual Transport Layer Security is a mechanism by which a client application verifies
a server and the server verifies the client application by exchanging respective certifi-
cates and proving that each one owns the corresponding private keys</p>
</li>
<li>
<p>OAuth 2.0<br>
OAuth 2.0 is the industry-standard protocol for authorization. OAuth 2.0 focuses on client developer simplicity while providing specific authorization flows for web applications, desktop applications, mobile phones, and living room devices. This specification and its extensions are being developed within the IETF OAuth Working Group.</p>
</li>
</ul>
<h4 id="-choose-the-right-api-authentication-protocole">&raquo; Choose The Right API authentication Protocole</h4>
<ul>
<li>
<p>Basic Authentication<br>
why is this choice bad for your API?</p>
<ul>
<li>
<p>the username and password are long-living credentials<br>
if a user provides a username and password to an application, the
application needs to retain this information for that particular user
session to access the microservices. The time during which this
information needs to be retained could be as long as the application
decide, Therefore if a basic authentication is used, the application has
to retain this information for long durations of time. The longer this
information is retained, the higher the chance of compromise. And
because these credentials rarely change, a compromise of this
information could have severe consequences.</p>
</li>
<li>
<p>No restrictions on what the application can do<br>
After an application gets access to the
username and password of a user, it can do everything that the user can do with the
microservice. In addition to accessing the microservice, the application can do
anything with those credentials, even on other systems</p>
</li>
</ul>
</li>
<li>
<p>Mutual TLS (MTLS)<br>
This is a Good Protocole to use, all it does is verify the Cert Key between the server and client, this type of protocol has an Expire option so this solves the problem that we&rsquo;ve with the Basic Authentication Header, but this is not the best choice for the API (or the end-user), it&rsquo;s like taking a seaplane to float on the water
it will work but it would be better if you take a Sea Boat because it&rsquo;s designed for this only and it&rsquo;s faster
we will use it later to secure the connection between the API-Gateway and the microservices</p>
</li>
<li>
<p>Auth 2.0 (Use ME)<br>
To understand why OAuth 2.0 is <strong>the best security protocol</strong> for you, first you need to understand your audience.
You need to figure out</p>
<ul>
<li>who wants access to your resources</li>
<li>for what purpose</li>
<li>for how long<br>
Auth 2.0 provides all of these requirements, so we can use it instead of HTTP/1.0 Basic Authentication or MTLS\</li>
</ul>
</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>$ curl -u application1:application1secret <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>-H <span style="color:#e6db74">&#34;Content-Type: application/x-www-form-urlencoded&#34;</span> <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>-d <span style="color:#e6db74">&#34;grant_type=client_credentials&#34;</span> <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>http://localhost:9090/token/oauth/token | jq
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;access_token&#34;</span>:<span style="color:#e6db74">&#34;47190af1-624c-48a6-988d-f4319d36b7f4&#34;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;token_type&#34;</span>:<span style="color:#e6db74">&#34;bearer&#34;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;expires_in&#34;</span>:3599
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Check Permission</span>
</span></span><span style="display:flex;"><span>$ curl http://localhost:9090/oauth/check_token -H <span style="color:#e6db74">&#34;Authorization: Basic YXBwbGljYXRpb24xOmFwcGxpY2F0aW9uMXNlY3JldA==&#34;</span> -d <span style="color:#e6db74">&#34;token=626e34e6-002d-4d53-9656-9e06a5e7e0dc&amp;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">token_type_hint=access_token&#34;</span> | jq
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;active&#34;</span>: true,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;client_id&#34;</span>: <span style="color:#e6db74">&#34;application1&#34;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;scope&#34;</span>: <span style="color:#e6db74">&#34;read write&#34;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;sub&#34;</span>: <span style="color:#e6db74">&#34;application1&#34;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;aud&#34;</span>: <span style="color:#e6db74">&#34;http://orders.ecomm.com&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div><h4 id="secure-the-connection">Secure the connection</h4>
<p>in the example at the beginning of the post, we have two microservices one for Authentication and another for Ordering User Data and you already using Auth 2.0 on your application, but we still need to make the last steps to make sure that no one outside the API-Gateway can access any of the microservices</p>
<p>first, we will make a Firewall rule to block any External requests, Also we&rsquo;ll use Mutual TLS (MTLS) to block any Internal requests</p>
<p><img src="/images/micro.svg" alt="micro_png"></p>
<p>this was a Quick summary of microservices Security in Action Book (Part 2)
follow the RSS to see more posts about this book (Chapter by Chapter)</p>
]]></content></item><item><title>DAST with authentication</title><link>https://www.knas.me/posts/dast-with-authentication/</link><pubDate>Sat, 30 Jul 2022 16:35:19 +0200</pubDate><guid>https://www.knas.me/posts/dast-with-authentication/</guid><description>Hello, sometimes when you trying to automate something like XSS scanning you will find a big wall in your way that is called Authentication there are a lot of methods to use to solve this problem, in this blog I will show can we automate it first, we start with a small description of the authentication method with the solution in different tools and cases
Form-based (Cookies) this is the easiest one to automate because it doesn&amp;rsquo;t require many steps just send a request to a custom endpoint with your credentials in the request body and you will the authentication cookies in the Set-Cookie response header easy right?</description><content type="html"><![CDATA[<p>Hello, sometimes when you trying to automate something like XSS scanning you will find a big wall in your way that is called <em>Authentication</em>
there are a lot of methods to use to solve this problem, in this blog I will show can we automate it
first, we start with a small description of the authentication method with the solution in different tools and cases</p>
<hr>
<h3 id="form-based-cookies">Form-based (Cookies)</h3>
<p>this is the easiest one to automate because it doesn&rsquo;t require many steps just send a request to a custom endpoint with your credentials in the request body and you will the authentication cookies in the <code>Set-Cookie</code> response header
easy right? let&rsquo;s automate it</p>
<h4 id="-burpsuite">&raquo; BurpSuite</h4>
<p>you have to Go to <code>Application Login</code> in your scanning dashboard</p>
<p><img src="/images/burp_dashboard.png" alt="burp_dashboard"></p>
<p>the first option requires
the user name and password so burp will struggle to find the right login form, and it will check randomly for some HTML forms
with those input names ( pass, password,uname, username, etc.. ) so
this option is not the best, to solve this problem burp offers the second
option so you can tell burp where&rsquo;s the right form/inputs to choose by
recording your login steps in your browser with <a href="https://chrome.google.com/webstore/detail/burp-suite-navigation-rec/anpapjclbjicacakeoggghfldppbkepg?hl=en-GB">Burp Recorder Chrome
exteion</a>,
after closing your browser you will find JSON output in your clipboard,
take the output and past it here in the second option</p>
<h4 id="-zaproxy">&raquo; ZAPROXY</h4>
<p>zaproxy doesn&rsquo;t have the same feature as Burp Suite Chrome Extention but you can use something similar called ZEST Scripts, all you&rsquo;ve to do is</p>
<ol>
<li>
<p>Open ZAPROXY</p>
</li>
<li>
<p>Click on Recorder Icon in the TOP</p>
</li>
<li>
<p>Select your target</p>
</li>
<li>
<p>Click on Record
<img src="/images/zest.png" alt="zest"></p>
</li>
<li>
<p>open your browser and Login</p>
</li>
<li>
<p>Stop recording and Go to Session settings and select the authentication to <code>Script</code> and Load your Zest Script
<img src="/images/session.png" alt="zest_png"></p>
</li>
</ol>
<p>this is not the only way you can write a python script if you need extra steps like Handling the CSRF token</p>
<h4 id="-separate-script">&raquo; Separate Script</h4>
<p>you may need to write your scanning script, so you can do one of these methods, the first one is to send the request to the login endpoint
(you can do this also with a custom token part)</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">import</span> requests
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">main</span>():
</span></span><span style="display:flex;"><span>    resp <span style="color:#f92672">=</span> requests<span style="color:#f92672">.</span>post(<span style="color:#e6db74">&#34;http://testphp.vulnweb.com/userinfo.php&#34;</span>,data<span style="color:#f92672">=</span>{<span style="color:#e6db74">&#39;uname&#39;</span>:<span style="color:#e6db74">&#39;test&#39;</span>,<span style="color:#e6db74">&#39;pass&#39;</span>:<span style="color:#e6db74">&#39;test&#39;</span>})
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> <span style="color:#e6db74">&#34;Logout&#34;</span> <span style="color:#f92672">in</span> resp<span style="color:#f92672">.</span>content<span style="color:#f92672">.</span>decode():
</span></span><span style="display:flex;"><span>        print(resp<span style="color:#f92672">.</span>cookies())
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">else</span>:
</span></span><span style="display:flex;"><span>        print(<span style="color:#e6db74">&#34;Empty ..&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> __name__ <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;__main__&#34;</span>:
</span></span><span style="display:flex;"><span>    main()
</span></span></code></pre></div><p>the second one is using selenium and selecting the login inputs with Xpath or CSS Selectors and matching with the response <code>Set-Cookie</code> header</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># &lt;input name=&#34;username&#34; type=&#34;text&#34;&gt;</span>
</span></span><span style="display:flex;"><span>driver<span style="color:#f92672">.</span>find_element_by_xpath(<span style="color:#e6db74">&#34;//input[@name=&#39;username&#39;]&#34;</span>)
</span></span></code></pre></div><hr>
<h3 id="custom-api-key">Custom API key</h3>
<p>Some apps use custom HTTP header with JWT keys, you have to send a request to a custom endpoint and you will get the token key in JSON response so you will take the header value and put it in your HTTP request header</p>
<pre tabindex="0"><code># Response
HTTP/1.1 200 OK
X-API-KEY: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1lIjoia25hcy5tZSJ9.fb8Xti0rji8foYmpY18ewvMWcz0nbxE7FPHajK-7dXc


# Request
GET /user/1 
Host: target.com
X-API-KEY: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1lIjoia25hcy5tZSJ9.fb8Xti0rji8foYmpY18ewvMWcz0nbxE7FPHajK-7dXc
</code></pre><h4 id="-zaproxy-1">&raquo; ZAPROXY</h4>
<p>Open the <code>Request Editor</code> then send the login request to the authentication endpoint, click on the request in the <code>History tab</code>, Mark the Token value from the response, and flag it as an Authentication Loggin</p>
<p><img src="/images/zap_session.png" alt="zap_session"></p>
<p>or write a simple python script for that and add the API-KEY header in <a href="https://www.zaproxy.org/docs/authentication/handling-auth-yourself/#authentication-env-vars"> ZAP env variable</a></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>$ export ZAP_AUTH_HEADER<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;X-API: (RANDOM_KEY)&#34;</span>
</span></span></code></pre></div><h4 id="-burpsuite-1">&raquo; BurpSuite</h4>
<p>(doesn&rsquo;t support)</p>
<hr>
<h3 id="saml-sso">SAML (SSO)</h3>
<p>Security Authentication Markup Language (SAML) is used to verify ID and authenticate. It connects you (the identity provider) to the service provider by making you correctly verify your credentials</p>
<h4 id="-zaproxy-2">&raquo; ZAPROXY</h4>
<p>you have to install the <code>SAML plugin</code> first from MarketPlace, then follow these steps</p>
<ul>
<li>Open the Browser in ZAP for Manual Exploring</li>
<li>Sign into the app using SAML SSO</li>
<li>Close Browser</li>
<li>Find the folder holding the traffic to your app, right-click. Select Include in Context -&gt; Default Context</li>
<li>Open Tools -&gt; SAML Settings
<ul>
<li>Add or remove the same auth and response attributes as needed</li>
<li>save</li>
</ul>
</li>
<li>View the Alerts tab and finds SAML requests
- Right-click on the GET with the SAML auth request, selecting SAML Actions View/Resend.</li>
</ul>
<h4 id="-separate-script-1">&raquo; Separate Script</h4>
<p>you can find a lot of SSO clients in your programming language, here in python you have the <a href="https://pypi.org/project/python-saml/">python-saml</a> module, follow the demo folders for code examples, or read the docs for more</p>
<h4 id="-burpsuite-2">&raquo; BurpSuite</h4>
<p>you have to pay for the Burp Enterprise to access this feature</p>
<h4 id="oauth">OAUTH</h4>
<p>(coming soon)</p>
]]></content></item><item><title>Don't use Python List Everywhere</title><link>https://www.knas.me/posts/dont-use-python-list-everywhere/</link><pubDate>Sat, 16 Jul 2022 22:13:15 +0200</pubDate><guid>https://www.knas.me/posts/dont-use-python-list-everywhere/</guid><description>the common thing that if you wanna add some items to someplace may thinking to use List, that&amp;rsquo;s great python list has a lot of features that you need like
mutable: you can add/delete what you want from the list ordered: the items have a defined order allowed duplicates: lists can have items with the same value so you will ask me a question if lists have something like that so why should I avoid it then?</description><content type="html"><![CDATA[<p>the common thing that if you wanna add some items to someplace may thinking to use List, that&rsquo;s great python list has a lot of features that you need like</p>
<ul>
<li>mutable: you can add/delete what you want from the list</li>
<li>ordered: the items have a defined order</li>
<li>allowed duplicates: lists can have items with the same value</li>
</ul>
<p>so you will ask me a question if lists have something like that so why should I avoid it then?
well the answer key is that performance is the key, YES Lists are not the best choice if you&rsquo;re caring about your program&rsquo;s performance</p>
<p>before beginning we can take this as an example</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>l <span style="color:#f92672">=</span> list(range(<span style="color:#ae81ff">100</span>))
</span></span></code></pre></div><p>this a simple code that returns a int list from 0 to 99, so let&rsquo;s talk more about python integers</p>
<h3 id="what-are-python-integers-actually">what are Python Integers actually</h3>
<p>we all know that the python interpreter is written in C, so the python objects are C structures but it not contain the its value only, nope it contains extra information like</p>
<ul>
<li>variable type</li>
<li>size of the data members</li>
<li>reference count</li>
<li>the actual value the variable</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-C" data-lang="C"><span style="display:flex;"><span><span style="color:#66d9ef">struct</span> _longobject {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">long</span> ob_refcnt;
</span></span><span style="display:flex;"><span>    PyTypeObject <span style="color:#f92672">*</span>ob_type;
</span></span><span style="display:flex;"><span>    size_t ob_size;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">long</span> ob_digit[<span style="color:#ae81ff">1</span>];
</span></span><span style="display:flex;"><span>};
</span></span></code></pre></div><p>All this extra information is what gives python more flexibility to lets you code freely
Not just integers but all the data types in Python comes with this cost that becomes significant in structures that combine many of these objects like List</p>
<p>you understand what&rsquo;s python types are, so let&rsquo;s talk about</p>
<h3 id="why-list-is-not-the-best-choice">Why List is not the best choice</h3>
<p>Python list should be like a C array both are mutable but the difference is C array should be homogeneous not like Python list, yes this makes python list more flexible but it is more costly to be heterogeneous because each of the elements of the list must contain its extra information that I mentioned above
in short, each item is a complete Python object in the List
so when all list items are of the same type with this extra information that becomes redundant</p>
<p>Also if you tried to add more data to your python list you will do something very costly because python creates a new list with more extra space than the original list and push the new data and the old one into the new space
for example</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> l <span style="color:#f92672">=</span> [<span style="color:#ae81ff">1</span>,<span style="color:#ae81ff">2</span>]
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> l<span style="color:#f92672">.</span>append(<span style="color:#ae81ff">3</span>)
</span></span><span style="display:flex;"><span><span style="color:#75715e"># CREATE ANOTHER ONE len(x) == 3</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># APPEND number 3</span>
</span></span></code></pre></div><p><img src="https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3ocr9cx8k54sk2o6qetg.png" alt="digram"></p>
<p>imagine using something like that with the list that contains 100000 items, we will copy 100000 items in every append process</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># m = 100000</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">100</span>):
</span></span><span style="display:flex;"><span>    m<span style="color:#f92672">.</span>append(i)
</span></span></code></pre></div><h3 id="alternatives">Alternatives</h3>
<h4 id="tuples">Tuples</h4>
<p>Tuples are immutable so it has a fixed size, Also it&rsquo;s allow duplicates and Ordered</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> <span style="color:#f92672">%</span>time l <span style="color:#f92672">=</span> [<span style="color:#ae81ff">0</span>,<span style="color:#ae81ff">1</span>,<span style="color:#ae81ff">2</span>,<span style="color:#ae81ff">3</span>,<span style="color:#ae81ff">4</span>,<span style="color:#ae81ff">5</span>,<span style="color:#ae81ff">6</span>,<span style="color:#ae81ff">7</span>,<span style="color:#ae81ff">8</span>,<span style="color:#ae81ff">9</span>]
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">1000000</span> loops, best of <span style="color:#ae81ff">3</span>: <span style="color:#ae81ff">285</span> ns per loop
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> <span style="color:#f92672">%</span>timeit t <span style="color:#f92672">=</span> (<span style="color:#ae81ff">0</span>,<span style="color:#ae81ff">1</span>,<span style="color:#ae81ff">2</span>,<span style="color:#ae81ff">3</span>,<span style="color:#ae81ff">4</span>,<span style="color:#ae81ff">5</span>,<span style="color:#ae81ff">6</span>,<span style="color:#ae81ff">7</span>,<span style="color:#ae81ff">8</span>,<span style="color:#ae81ff">9</span>)
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">10000000</span> loops, best of <span style="color:#ae81ff">3</span>: <span style="color:#ae81ff">55.7</span> ns per loop
</span></span></code></pre></div><h4 id="sets">Sets</h4>
<p>Sets like Tuples but Unordered and Unchangeable it doesn&rsquo;t allow the duplicates items</p>
<p>let&rsquo;s take this example code</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">list_unique_names</span>(phonebook):
</span></span><span style="display:flex;"><span>    unique_names <span style="color:#f92672">=</span> []
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> name, phonenumber <span style="color:#f92672">in</span> phonebook: <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>        first_name, last_name <span style="color:#f92672">=</span> name<span style="color:#f92672">.</span>split(<span style="color:#e6db74">&#34; &#34;</span>, <span style="color:#ae81ff">1</span>)
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">for</span> unique <span style="color:#f92672">in</span> unique_names: 
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">if</span> unique <span style="color:#f92672">==</span> first_name:
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">break</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">else</span>:
</span></span><span style="display:flex;"><span>            unique_names<span style="color:#f92672">.</span>append(first_name)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> len(unique_names)
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">set_unique_names</span>(phonebook):
</span></span><span style="display:flex;"><span>    unique_names <span style="color:#f92672">=</span> set()
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> name, phonenumber <span style="color:#f92672">in</span> phonebook: 
</span></span><span style="display:flex;"><span>        first_name, last_name <span style="color:#f92672">=</span> name<span style="color:#f92672">.</span>split(<span style="color:#e6db74">&#34; &#34;</span>, <span style="color:#ae81ff">1</span>)
</span></span><span style="display:flex;"><span>        unique_names<span style="color:#f92672">.</span>add(first_name) 
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> len(unique_names)
</span></span><span style="display:flex;"><span>phonebook <span style="color:#f92672">=</span> [
</span></span><span style="display:flex;"><span>    (<span style="color:#e6db74">&#34;John Doe&#34;</span>, <span style="color:#e6db74">&#34;555-555-5555&#34;</span>),
</span></span><span style="display:flex;"><span>    (<span style="color:#e6db74">&#34;Albert Einstein&#34;</span>, <span style="color:#e6db74">&#34;212-555-5555&#34;</span>),
</span></span><span style="display:flex;"><span>    (<span style="color:#e6db74">&#34;John Murphey&#34;</span>, <span style="color:#e6db74">&#34;202-555-5555&#34;</span>),
</span></span><span style="display:flex;"><span>    (<span style="color:#e6db74">&#34;Albert Rutherford&#34;</span>, <span style="color:#e6db74">&#34;647-555-5555&#34;</span>),
</span></span><span style="display:flex;"><span>    (<span style="color:#e6db74">&#34;Guido van Rossum&#34;</span>, <span style="color:#e6db74">&#34;301-555-5555&#34;</span>),
</span></span><span style="display:flex;"><span>]
</span></span><span style="display:flex;"><span>print(<span style="color:#e6db74">&#34;Number of unique names from set method:&#34;</span>, set_unique_names(phonebook))
</span></span><span style="display:flex;"><span>print(<span style="color:#e6db74">&#34;Number of unique names from list method:&#34;</span>, list_unique_names(phonebook))
</span></span></code></pre></div><p>we have two functions here, One used list, the other sets
and after calling them this the performance report</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> <span style="color:#f92672">%</span>timeit list_unique_names(large_phonebook)
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">1</span> loops, best of <span style="color:#ae81ff">3</span>: <span style="color:#ae81ff">2.56</span> s per loop
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> <span style="color:#f92672">%</span>timeit set_unique_names(large_phonebook)
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">100</span> loops, best of <span style="color:#ae81ff">3</span>: <span style="color:#ae81ff">9.57</span> ms per loop
</span></span></code></pre></div><h4 id="numpy-arrays">Numpy Arrays</h4>
<p>numpy arrays are almost certainly a better choice if you are doing anything heavily nu‐
meric, as you get more datatype options and many specialized and fast functions. You
might choose to avoid numpy if you want fewer dependencies for your project, though
Cython and Pythran work equally well with array and numpy arrays; Numba works with
numpy arrays only</p>
<h2 id="references">References</h2>
<ul>
<li><a href="https://www.amazon.com/High-Performance-Python-Performant-Programming/dp/1449361595">https://www.amazon.com/High-Performance-Python-Performant-Programming/dp/1449361595</a></li>
<li><a href="https://www.analyticsvidhya.com/blog/2021/05/why-you-should-avoid-using-python-lists/#h2_3">https://www.analyticsvidhya.com/blog/2021/05/why-you-should-avoid-using-python-lists/#h2_3</a></li>
</ul>
<p>thanks for reading
bye :D</p>
<p><img src="https://media.giphy.com/media/m9eG1qVjvN56H0MXt8/giphy.gif" alt="BYE"></p>
]]></content></item><item><title>SQL inection on gdclive.nokia.com</title><link>https://www.knas.me/posts/sql-inection-on-gdclive.nokia.com/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.knas.me/posts/sql-inection-on-gdclive.nokia.com/</guid><description>Hi, this blog about SQL Injection in Nokia.com Allowed me to Dump all database
Full POC : when I&amp;rsquo;m visiting this domain gdclive.nokia.com I&amp;rsquo;ve found something
First: this domain has been used an old version of Joomla CMS
let&amp;rsquo;s scan it using the joomscan tool for dumping all pieces of information about Joomla (plugins, version, etc..)
All results :
Joomla Version: 3.1 Plugins: JCK Editor (6.4.4) searching for JCK Editor in exploit-db.</description><content type="html"><![CDATA[<p>Hi, this blog about SQL Injection in Nokia.com Allowed me to Dump all database</p>
<h3 id="full-poc-">Full POC :</h3>
<p>when I&rsquo;m visiting this domain gdclive.nokia.com I&rsquo;ve found something</p>
<p>First: this domain has been used an old version of Joomla CMS</p>
<p>let&rsquo;s scan it using the joomscan tool for dumping all pieces of information about Joomla (plugins, version, etc..)</p>
<p>All results :</p>
<pre tabindex="0"><code>Joomla Version: 3.1
Plugins: JCK Editor (6.4.4)
</code></pre><p>searching for JCK Editor in exploit-db.com
and I&rsquo;ve found this exploit <a href="https://www.exploit-db.com/exploits/45423">https://www.exploit-db.com/exploits/45423</a>
let&rsquo;s exploit it :D</p>
<!-- raw HTML omitted -->
<p>Worked ..!
you can see the version of the database :D</p>
<p>this is the time of SQLMAP Tool</p>
<!-- raw HTML omitted -->
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>$ sqlmap -u <span style="color:#e6db74">&#39;https://gdclive.nokia.com/plugins/editors/jckeditor/plugins/jtreelink/dialogs/links.php?extension=menu&amp;view=menu&amp;parent=&#39;</span> --level<span style="color:#f92672">=</span><span style="color:#ae81ff">5</span> --risk<span style="color:#f92672">=</span><span style="color:#ae81ff">3</span> --random-agent --technique<span style="color:#f92672">=</span>U -p parent --batch --current-db --current-user
</span></span></code></pre></div><!-- raw HTML omitted -->
<p>you can see the current user and the name of the database :)
After dumping all databases using the <code>--all</code> option and unencrypt the password of the admin account let&rsquo;s login in admin panel</p>
<!-- raw HTML omitted -->
<p>You can see this <!-- raw HTML omitted -->video<!-- raw HTML omitted --> about this bug</p>
<!-- raw HTML omitted -->
<p>Thanks ;0</p>
]]></content></item></channel></rss>