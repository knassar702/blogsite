<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on Khaled Nassar</title><link>https://www.knas.me/posts/</link><description>Recent content in Posts on Khaled Nassar</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sat, 30 Jul 2022 16:35:19 +0200</lastBuildDate><atom:link href="https://www.knas.me/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>DAST with authentication</title><link>https://www.knas.me/posts/dast-with-authentication/</link><pubDate>Sat, 30 Jul 2022 16:35:19 +0200</pubDate><guid>https://www.knas.me/posts/dast-with-authentication/</guid><description>Hello, sometimes when you trying to automate something like XSS scanning you will find a big wall in your way that is called Authentication there are a lot of methods to use to solve this problem, in this blog I will show can we automate it first, we start with a small description of the authentication method with the solution in different tools and cases
Form-based (Cookies) this is the easiest one to automate because it doesn&amp;rsquo;t require many steps just send a request to a custom endpoint with your credentials in the request body and you will the authentication cookies in the Set-Cookie response header easy right?</description><content type="html"><![CDATA[<p>Hello, sometimes when you trying to automate something like XSS scanning you will find a big wall in your way that is called <em>Authentication</em>
there are a lot of methods to use to solve this problem, in this blog I will show can we automate it
first, we start with a small description of the authentication method with the solution in different tools and cases</p>
<hr>
<h3 id="form-based-cookies">Form-based (Cookies)</h3>
<p>this is the easiest one to automate because it doesn&rsquo;t require many steps just send a request to a custom endpoint with your credentials in the request body and you will the authentication cookies in the <code>Set-Cookie</code> response header
easy right? let&rsquo;s automate it</p>
<h4 id="-burpsuite">&raquo; BurpSuite</h4>
<p>you have to Go to <code>Application Login</code> in your scanning dashboard</p>
<p><img src="/images/burp_dashboard.png" alt="burp_dashboard"></p>
<p>the first option requires
the user name and password so burp will struggle to find the right login form, and it will check randomly for some HTML forms
with those input names ( pass, password,uname, username, etc.. ) so
this option is not the best, to solve this problem burp offers the second
option so you can tell burp where&rsquo;s the right form/inputs to choose by
recording your login steps in your browser with <a href="https://chrome.google.com/webstore/detail/burp-suite-navigation-rec/anpapjclbjicacakeoggghfldppbkepg?hl=en-GB">Burp Recorder Chrome
exteion</a>,
after closing your browser you will find JSON output in your clipboard,
take the output and past it here in the second option</p>
<h4 id="-zaproxy">&raquo; ZAPROXY</h4>
<p>zaproxy doesn&rsquo;t have the same feature as Burp Suite Chrome Extention but you can use something similar called ZEST Scripts, all you&rsquo;ve to do is</p>
<ol>
<li>
<p>Open ZAPROXY</p>
</li>
<li>
<p>Click on Recorder Icon in the TOP</p>
</li>
<li>
<p>Select your target</p>
</li>
<li>
<p>Click on Record
<img src="/images/zest.png" alt="zest"></p>
</li>
<li>
<p>open your browser and Login</p>
</li>
<li>
<p>Stop recording and Go to Session settings and select the authentication to <code>Script</code> and Load your Zest Script
<img src="/images/session.png" alt="zest_png"></p>
</li>
</ol>
<p>this is not the only way you can write a python script if you need extra steps like Handling the CSRF token</p>
<h4 id="-separate-script">&raquo; Separate Script</h4>
<p>you may need to write your scanning script, so you can do one of these methods, the first one is to send the request to the login endpoint
(you can do this also with a custom token part)</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">import</span> requests
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">main</span>():
</span></span><span style="display:flex;"><span>    resp <span style="color:#f92672">=</span> requests<span style="color:#f92672">.</span>post(<span style="color:#e6db74">&#34;http://testphp.vulnweb.com/userinfo.php&#34;</span>,data<span style="color:#f92672">=</span>{<span style="color:#e6db74">&#39;uname&#39;</span>:<span style="color:#e6db74">&#39;test&#39;</span>,<span style="color:#e6db74">&#39;pass&#39;</span>:<span style="color:#e6db74">&#39;test&#39;</span>})
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> <span style="color:#e6db74">&#34;Logout&#34;</span> <span style="color:#f92672">in</span> resp<span style="color:#f92672">.</span>content<span style="color:#f92672">.</span>decode():
</span></span><span style="display:flex;"><span>        print(resp<span style="color:#f92672">.</span>cookies())
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">else</span>:
</span></span><span style="display:flex;"><span>        print(<span style="color:#e6db74">&#34;Empty ..&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> __name__ <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;__main__&#34;</span>:
</span></span><span style="display:flex;"><span>    main()
</span></span></code></pre></div><p>the second one is using selenium and selecting the login inputs with Xpath or CSS Selectors and matching with the response <code>Set-Cookie</code> header</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># &lt;input name=&#34;username&#34; type=&#34;text&#34;&gt;</span>
</span></span><span style="display:flex;"><span>driver<span style="color:#f92672">.</span>find_element_by_xpath(<span style="color:#e6db74">&#34;//input[@name=&#39;username&#39;]&#34;</span>)
</span></span></code></pre></div><hr>
<h3 id="custom-api-key">Custom API key</h3>
<p>Some apps use custom HTTP header with JWT keys, you have to send a request to a custom endpoint and you will get the token key in JSON response so you will take the header value and put it in your HTTP request header</p>
<pre tabindex="0"><code># Response
HTTP/1.1 200 OK
X-API-KEY: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1lIjoia25hcy5tZSJ9.fb8Xti0rji8foYmpY18ewvMWcz0nbxE7FPHajK-7dXc


# Request
GET /user/1 
Host: target.com
X-API-KEY: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1lIjoia25hcy5tZSJ9.fb8Xti0rji8foYmpY18ewvMWcz0nbxE7FPHajK-7dXc
</code></pre><h4 id="-zaproxy-1">&raquo; ZAPROXY</h4>
<p>Open the <code>Request Editor</code> then send the login request to the authentication endpoint, click on the request in the <code>History tab</code>, Mark the Token value from the response, and flag it as an Authentication Loggin</p>
<p><img src="/images/zap_session.png" alt="zap_session"></p>
<h4 id="-burpsuite-1">&raquo; BurpSuite</h4>
<p>(doesn&rsquo;t support)</p>
<hr>
<h3 id="saml-sso">SAML (SSO)</h3>
<p>Security Authentication Markup Language (SAML) is used to verify ID and authenticate. It connects you (the identity provider) to the service provider by making you correctly verify your credentials</p>
<h4 id="-zaproxy-2">&raquo; ZAPROXY</h4>
<p>you have to install the <code>SAML plugin</code> first from MarketPlace, then follow these steps</p>
<ul>
<li>Open the Browser in ZAP for Manual Exploring</li>
<li>Sign into the app using SAML SSO</li>
<li>Close Browser</li>
<li>Find the folder holding the traffic to your app, right-click. Select Include in Context -&gt; Default Context</li>
<li>Open Tools -&gt; SAML Settings
<ul>
<li>Add or remove the same auth and response attributes as needed</li>
<li>save</li>
</ul>
</li>
<li>View the Alerts tab and finds SAML requests
- Right-click on the GET with the SAML auth request, selecting SAML Actions View/Resend.</li>
</ul>
<h4 id="-separate-script-1">&raquo; Separate Script</h4>
<p>you can find a lot of SSO clients in your programming language, here in python you have the <a href="https://pypi.org/project/python-saml/">python-saml</a> module, follow the demo folders for code examples, or read the docs for more</p>
<h4 id="-burpsuite-2">&raquo; BurpSuite</h4>
<p>you have to pay for the Burp Enterprise to access this feature</p>
<h4 id="oauth">OAUTH</h4>
<p>(coming soon)</p>
]]></content></item><item><title>Autocompletion for Neovim</title><link>https://www.knas.me/posts/autocompletion-for-neovim/</link><pubDate>Sat, 16 Jul 2022 22:15:09 +0200</pubDate><guid>https://www.knas.me/posts/autocompletion-for-neovim/</guid><description>One of the coolest features that can make you more productive with NeoVim is autocompletion, so we have some plugins to choose between them based on the performance
YouCompleteMe Coc.nvim these plugins are great to use but they are very heavy because of Javascript and Python, so I decided to switch to another solution and the solution is Lua Plugin called nvim-cmp with this plugin you can add an auto-completion to your neovim with minimal performance, all you have to do is download the language server</description><content type="html"><![CDATA[<p>One of the coolest features that can make you more productive with NeoVim is autocompletion, so we have some plugins to choose between them based on the performance</p>
<ul>
<li>YouCompleteMe</li>
<li>Coc.nvim</li>
</ul>
<p>these plugins are great to use but they are very heavy because of Javascript and Python, so I decided to switch to another solution
and the solution is Lua Plugin called <a href="https://github.com/hrsh7th/nvim-cmp">nvim-cmp</a>
with this plugin you can add an auto-completion to your neovim with minimal performance, all you have to do is download the <strong>language server</strong></p>
<h2 id="install">Install</h2>
<p>before installing the plugins you need to install Lua first</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>$ sudo pacman -S lua
</span></span></code></pre></div><p>and you need a Plugin manager you can choose between</p>
<ul>
<li>vim-plug ( I use this )</li>
<li>Pathogen</li>
<li>Vundle</li>
</ul>
<p>after installing the nvim-cmp plugin you have to install some external plugins</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-vim" data-lang="vim"><span style="display:flex;"><span><span style="color:#75715e">&#34; ~/.config/nvim/init.nvim</span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span>    <span style="color:#a6e22e">Plug</span> <span style="color:#e6db74">&#39;hrsh7th/cmp-nvim-lsp&#39;</span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span>    <span style="color:#a6e22e">Plug</span> <span style="color:#e6db74">&#39;hrsh7th/cmp-buffer&#39;</span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span>    <span style="color:#a6e22e">Plug</span> <span style="color:#e6db74">&#39;hrsh7th/cmp-path&#39;</span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span>    <span style="color:#a6e22e">Plug</span> <span style="color:#e6db74">&#39;hrsh7th/cmp-cmdline&#39;</span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span>    <span style="color:#a6e22e">Plug</span> <span style="color:#e6db74">&#39;hrsh7th/nvim-cmp&#39;</span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span>    <span style="color:#a6e22e">Plug</span> <span style="color:#e6db74">&#39;hrsh7th/vim-vsnip&#39;</span><span style="color:#960050;background-color:#1e0010">
</span></span></span></code></pre></div><p>after installing the server of your language you may need some Lua code to enable it
so you can use this code to copy &amp; paste into your <strong>init.nvim</strong> file
Also, Don&rsquo;t forget to check <a href="https://github.com/neovim/nvim-lspconfig/blob/master/doc/server_configurations.md">this page</a> to get the right server for your language</p>
<p>in my case I&rsquo;ll install <a href="https://rust-analyzer.github.io/">rust-analyzer</a></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>$ sudo pacman -S rust-analyzer
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-vim" data-lang="vim"><span style="display:flex;"><span><span style="color:#75715e">&#34; ~/.config/nvim/init.nvim</span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#a6e22e">lua</span> &lt;&lt;<span style="color:#a6e22e">EOF</span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span>  -- <span style="color:#a6e22e">Setup</span> <span style="color:#a6e22e">nvim</span>-<span style="color:#a6e22e">cmp</span>.<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span>  <span style="color:#a6e22e">local</span> <span style="color:#a6e22e">cmp</span> = <span style="color:#a6e22e">require</span><span style="color:#e6db74">&#39;cmp&#39;</span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span>  <span style="color:#a6e22e">cmp</span>.<span style="color:#a6e22e">setup</span>({<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span>    <span style="color:#a6e22e">snippet</span> = {<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span>      -- <span style="color:#a6e22e">REQUIRED</span> - <span style="color:#a6e22e">you</span> <span style="color:#a6e22e">must</span> <span style="color:#a6e22e">specify</span> <span style="color:#a6e22e">a</span> <span style="color:#a6e22e">snippet</span> <span style="color:#a6e22e">engine</span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span>      <span style="color:#a6e22e">expand</span> = <span style="color:#66d9ef">function</span>(<span style="color:#a6e22e">args</span>)<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span>        <span style="color:#a6e22e">vim</span>.<span style="color:#a6e22e">fn</span>[<span style="color:#e6db74">&#34;vsnip#anonymous&#34;</span>](<span style="color:#a6e22e">args</span>.<span style="color:#a6e22e">body</span>) -- <span style="color:#a6e22e">For</span> `<span style="color:#a6e22e">vsnip</span>` <span style="color:#a6e22e">users</span>.<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span>        -- <span style="color:#a6e22e">require</span>(<span style="color:#e6db74">&#39;luasnip&#39;</span>).<span style="color:#a6e22e">lsp_expand</span>(<span style="color:#a6e22e">args</span>.<span style="color:#a6e22e">body</span>) -- <span style="color:#a6e22e">For</span> `<span style="color:#a6e22e">luasnip</span>` <span style="color:#a6e22e">users</span>.<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span>        -- <span style="color:#a6e22e">require</span>(<span style="color:#e6db74">&#39;snippy&#39;</span>).<span style="color:#a6e22e">expand_snippet</span>(<span style="color:#a6e22e">args</span>.<span style="color:#a6e22e">body</span>) -- <span style="color:#a6e22e">For</span> `<span style="color:#a6e22e">snippy</span>` <span style="color:#a6e22e">users</span>.<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span>        -- <span style="color:#a6e22e">vim</span>.<span style="color:#a6e22e">fn</span>[<span style="color:#e6db74">&#34;UltiSnips#Anon&#34;</span>](<span style="color:#a6e22e">args</span>.<span style="color:#a6e22e">body</span>) -- <span style="color:#a6e22e">For</span> `<span style="color:#a6e22e">ultisnips</span>` <span style="color:#a6e22e">users</span>.<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span>      <span style="color:#a6e22e">end</span>,<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span>    },<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span>    <span style="color:#a6e22e">mapping</span> = {<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span>      [<span style="color:#e6db74">&#39;&lt;C-b&gt;&#39;</span>] = <span style="color:#a6e22e">cmp</span>.<span style="color:#a6e22e">mapping</span>(<span style="color:#a6e22e">cmp</span>.<span style="color:#a6e22e">mapping</span>.<span style="color:#a6e22e">scroll_docs</span>(<span style="color:#ae81ff">-4</span>), { <span style="color:#e6db74">&#39;i&#39;</span>, <span style="color:#e6db74">&#39;c&#39;</span> }),<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span>      [<span style="color:#e6db74">&#39;&lt;C-f&gt;&#39;</span>] = <span style="color:#a6e22e">cmp</span>.<span style="color:#a6e22e">mapping</span>(<span style="color:#a6e22e">cmp</span>.<span style="color:#a6e22e">mapping</span>.<span style="color:#a6e22e">scroll_docs</span>(<span style="color:#ae81ff">4</span>), { <span style="color:#e6db74">&#39;i&#39;</span>, <span style="color:#e6db74">&#39;c&#39;</span> }),<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span>      [<span style="color:#e6db74">&#39;&lt;C-Space&gt;&#39;</span>] = <span style="color:#a6e22e">cmp</span>.<span style="color:#a6e22e">mapping</span>(<span style="color:#a6e22e">cmp</span>.<span style="color:#a6e22e">mapping</span>.<span style="color:#a6e22e">complete</span>(), { <span style="color:#e6db74">&#39;i&#39;</span>, <span style="color:#e6db74">&#39;c&#39;</span> }),<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span>      [<span style="color:#e6db74">&#39;&lt;C-y&gt;&#39;</span>] = <span style="color:#a6e22e">cmp</span>.<span style="color:#a6e22e">config</span>.<span style="color:#a6e22e">disable</span>, -- <span style="color:#a6e22e">Specify</span> `<span style="color:#a6e22e">cmp</span>.<span style="color:#a6e22e">config</span>.<span style="color:#a6e22e">disable</span>` <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">you</span> <span style="color:#a6e22e">want</span> <span style="color:#a6e22e">to</span> <span style="color:#a6e22e">remove</span> <span style="color:#a6e22e">the</span> <span style="color:#a6e22e">default</span> `&lt;<span style="color:#a6e22e">C</span>-<span style="color:#a6e22e">y</span>&gt;` <span style="color:#a6e22e">mapping</span>.<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span>      [<span style="color:#e6db74">&#39;&lt;C-e&gt;&#39;</span>] = <span style="color:#a6e22e">cmp</span>.<span style="color:#a6e22e">mapping</span>({<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span>        <span style="color:#a6e22e">i</span> = <span style="color:#a6e22e">cmp</span>.<span style="color:#a6e22e">mapping</span>.<span style="color:#a6e22e">abort</span>(),<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span>        <span style="color:#a6e22e">c</span> = <span style="color:#a6e22e">cmp</span>.<span style="color:#a6e22e">mapping</span>.<span style="color:#a6e22e">close</span>(),<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span>      }),<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span>      [<span style="color:#e6db74">&#39;&lt;CR&gt;&#39;</span>] = <span style="color:#a6e22e">cmp</span>.<span style="color:#a6e22e">mapping</span>.<span style="color:#a6e22e">confirm</span>({ <span style="color:#a6e22e">select</span> = <span style="color:#a6e22e">true</span> }), -- <span style="color:#a6e22e">Accept</span> <span style="color:#a6e22e">currently</span> <span style="color:#a6e22e">selected</span> <span style="color:#a6e22e">item</span>. <span style="color:#a6e22e">Set</span> `<span style="color:#a6e22e">select</span>` <span style="color:#a6e22e">to</span> `<span style="color:#a6e22e">false</span>` <span style="color:#a6e22e">to</span> <span style="color:#a6e22e">only</span> <span style="color:#a6e22e">confirm</span> <span style="color:#a6e22e">explicitly</span> <span style="color:#a6e22e">selected</span> <span style="color:#a6e22e">items</span>.<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span>    },<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span>    <span style="color:#a6e22e">sources</span> = <span style="color:#a6e22e">cmp</span>.<span style="color:#a6e22e">config</span>.<span style="color:#a6e22e">sources</span>({<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span>      { <span style="color:#a6e22e">name</span> = <span style="color:#e6db74">&#39;nvim_lsp&#39;</span> },<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span>      { <span style="color:#a6e22e">name</span> = <span style="color:#e6db74">&#39;vsnip&#39;</span> }, -- <span style="color:#a6e22e">For</span> <span style="color:#a6e22e">vsnip</span> <span style="color:#a6e22e">users</span>.<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span>      -- { <span style="color:#a6e22e">name</span> = <span style="color:#e6db74">&#39;luasnip&#39;</span> }, -- <span style="color:#a6e22e">For</span> <span style="color:#a6e22e">luasnip</span> <span style="color:#a6e22e">users</span>.<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span>      -- { <span style="color:#a6e22e">name</span> = <span style="color:#e6db74">&#39;ultisnips&#39;</span> }, -- <span style="color:#a6e22e">For</span> <span style="color:#a6e22e">ultisnips</span> <span style="color:#a6e22e">users</span>.<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span>      -- { <span style="color:#a6e22e">name</span> = <span style="color:#e6db74">&#39;snippy&#39;</span> }, -- <span style="color:#a6e22e">For</span> <span style="color:#a6e22e">snippy</span> <span style="color:#a6e22e">users</span>.<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span>    }, {<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span>      { <span style="color:#a6e22e">name</span> = <span style="color:#e6db74">&#39;buffer&#39;</span> },<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span>    })<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span>  })<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span>  -- <span style="color:#a6e22e">Set</span> <span style="color:#a6e22e">configuration</span> <span style="color:#a6e22e">for</span> <span style="color:#a6e22e">specific</span> <span style="color:#a6e22e">filetype</span>.<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span>  <span style="color:#a6e22e">cmp</span>.<span style="color:#a6e22e">setup</span>.<span style="color:#a6e22e">filetype</span>(<span style="color:#e6db74">&#39;gitcommit&#39;</span>, {<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span>    <span style="color:#a6e22e">sources</span> = <span style="color:#a6e22e">cmp</span>.<span style="color:#a6e22e">config</span>.<span style="color:#a6e22e">sources</span>({<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span>      { <span style="color:#a6e22e">name</span> = <span style="color:#e6db74">&#39;cmp_git&#39;</span> }, -- <span style="color:#a6e22e">You</span> <span style="color:#a6e22e">can</span> <span style="color:#a6e22e">specify</span> <span style="color:#a6e22e">the</span> `<span style="color:#a6e22e">cmp_git</span>` <span style="color:#a6e22e">source</span> <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">you</span> <span style="color:#a6e22e">were</span> <span style="color:#a6e22e">installed</span> <span style="color:#a6e22e">it</span>.<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span>    }, {<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span>      { <span style="color:#a6e22e">name</span> = <span style="color:#e6db74">&#39;buffer&#39;</span> },<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span>    })<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span>  })<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span>  -- <span style="color:#a6e22e">Use</span> <span style="color:#a6e22e">buffer</span> <span style="color:#a6e22e">source</span> <span style="color:#a6e22e">for</span> `/` (<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">you</span> <span style="color:#a6e22e">enabled</span> `<span style="color:#a6e22e">native_menu</span>`, <span style="color:#a6e22e">this</span> <span style="color:#a6e22e">won</span>&#39;<span style="color:#a6e22e">t</span> <span style="color:#a6e22e">work</span> <span style="color:#a6e22e">anymore</span>).<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span>  <span style="color:#a6e22e">cmp</span>.<span style="color:#a6e22e">setup</span>.<span style="color:#a6e22e">cmdline</span>(<span style="color:#e6db74">&#39;/&#39;</span>, {<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span>    <span style="color:#a6e22e">sources</span> = {<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span>      { <span style="color:#a6e22e">name</span> = <span style="color:#e6db74">&#39;buffer&#39;</span> }<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span>    }<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span>  })<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span>  -- <span style="color:#a6e22e">Use</span> <span style="color:#a6e22e">cmdline</span> &amp; <span style="color:#a6e22e">path</span> <span style="color:#a6e22e">source</span> <span style="color:#a6e22e">for</span> <span style="color:#e6db74">&#39;:&#39;</span> (<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">you</span> <span style="color:#a6e22e">enabled</span> `<span style="color:#a6e22e">native_menu</span>`, <span style="color:#a6e22e">this</span> <span style="color:#a6e22e">won</span>&#39;<span style="color:#a6e22e">t</span> <span style="color:#a6e22e">work</span> <span style="color:#a6e22e">anymore</span>).<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span>  <span style="color:#a6e22e">cmp</span>.<span style="color:#a6e22e">setup</span>.<span style="color:#a6e22e">cmdline</span>(<span style="color:#e6db74">&#39;:&#39;</span>, {<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span>    <span style="color:#a6e22e">sources</span> = <span style="color:#a6e22e">cmp</span>.<span style="color:#a6e22e">config</span>.<span style="color:#a6e22e">sources</span>({<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span>      { <span style="color:#a6e22e">name</span> = <span style="color:#e6db74">&#39;path&#39;</span> }<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span>    }, {<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span>      { <span style="color:#a6e22e">name</span> = <span style="color:#e6db74">&#39;cmdline&#39;</span> }<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span>    })<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span>  })<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span>  -- <span style="color:#a6e22e">Setup</span> <span style="color:#a6e22e">lspconfig</span>.<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span>  <span style="color:#a6e22e">local</span> <span style="color:#a6e22e">capabilities</span> = <span style="color:#a6e22e">require</span>(<span style="color:#e6db74">&#39;cmp_nvim_lsp&#39;</span>).<span style="color:#a6e22e">update_capabilities</span>(<span style="color:#a6e22e">vim</span>.<span style="color:#a6e22e">lsp</span>.<span style="color:#a6e22e">protocol</span>.<span style="color:#a6e22e">make_client_capabilities</span>())<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span>  -- <span style="color:#a6e22e">Replace</span> &lt;<span style="color:#a6e22e">YOUR_LSP_SERVER</span>&gt; <span style="color:#a6e22e">with</span> <span style="color:#a6e22e">each</span> <span style="color:#a6e22e">lsp</span> <span style="color:#a6e22e">server</span> <span style="color:#a6e22e">you</span>&#39;<span style="color:#a6e22e">ve</span> <span style="color:#a6e22e">enabled</span>.<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span>  <span style="color:#a6e22e">require</span><span style="color:#e6db74">&#39;lspconfig&#39;</span>.<span style="color:#a6e22e">rust_analyzer</span>.<span style="color:#a6e22e">setup</span>{<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span>      <span style="color:#a6e22e">capabilities</span> = <span style="color:#a6e22e">capabilities</span>,<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span>  }<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#a6e22e">EOF</span><span style="color:#960050;background-color:#1e0010">
</span></span></span></code></pre></div><p>You can scroll in the code suggestion with CTRL+B or CTRL+F</p>
<p><img src="https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eno0l4jdrk9v3yfa294r.png" alt="Image description"></p>
]]></content></item><item><title>Don't use Python List Everywhere</title><link>https://www.knas.me/posts/dont-use-python-list-everywhere/</link><pubDate>Sat, 16 Jul 2022 22:13:15 +0200</pubDate><guid>https://www.knas.me/posts/dont-use-python-list-everywhere/</guid><description>the common thing that if you wanna add some items to someplace may thinking to use List, that&amp;rsquo;s great python list has a lot of features that you need like
mutable: you can add/delete what you want from the list ordered: the items have a defined order allowed duplicates: lists can have items with the same value so you will ask me a question if lists have something like that so why should I avoid it then?</description><content type="html"><![CDATA[<p>the common thing that if you wanna add some items to someplace may thinking to use List, that&rsquo;s great python list has a lot of features that you need like</p>
<ul>
<li>mutable: you can add/delete what you want from the list</li>
<li>ordered: the items have a defined order</li>
<li>allowed duplicates: lists can have items with the same value</li>
</ul>
<p>so you will ask me a question if lists have something like that so why should I avoid it then?
well the answer key is that performance is the key, YES Lists are not the best choice if you&rsquo;re caring about your program&rsquo;s performance</p>
<p>before beginning we can take this as an example</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>l <span style="color:#f92672">=</span> list(range(<span style="color:#ae81ff">100</span>))
</span></span></code></pre></div><p>this a simple code that returns a int list from 0 to 99, so let&rsquo;s talk more about python integers</p>
<h3 id="what-are-python-integers-actually">what are Python Integers actually</h3>
<p>we all know that the python interpreter is written in C, so the python objects are C structures but it not contain the its value only, nope it contains extra information like</p>
<ul>
<li>variable type</li>
<li>size of the data members</li>
<li>reference count</li>
<li>the actual value the variable</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-C" data-lang="C"><span style="display:flex;"><span><span style="color:#66d9ef">struct</span> _longobject {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">long</span> ob_refcnt;
</span></span><span style="display:flex;"><span>    PyTypeObject <span style="color:#f92672">*</span>ob_type;
</span></span><span style="display:flex;"><span>    size_t ob_size;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">long</span> ob_digit[<span style="color:#ae81ff">1</span>];
</span></span><span style="display:flex;"><span>};
</span></span></code></pre></div><p>All this extra information is what gives python more flexibility to lets you code freely
Not just integers but all the data types in Python comes with this cost that becomes significant in structures that combine many of these objects like List</p>
<p>you understand what&rsquo;s python types are, so let&rsquo;s talk about</p>
<h3 id="why-list-is-not-the-best-choice">Why List is not the best choice</h3>
<p>Python list should be like a C array both are mutable but the difference is C array should be homogeneous not like Python list, yes this makes python list more flexible but it is more costly to be heterogeneous because each of the elements of the list must contain its extra information that I mentioned above
in short, each item is a complete Python object in the List
so when all list items are of the same type with this extra information that becomes redundant</p>
<p>Also if you tried to add more data to your python list you will do something very costly because python creates a new list with more extra space than the original list and push the new data and the old one into the new space
for example</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> l <span style="color:#f92672">=</span> [<span style="color:#ae81ff">1</span>,<span style="color:#ae81ff">2</span>]
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> l<span style="color:#f92672">.</span>append(<span style="color:#ae81ff">3</span>)
</span></span><span style="display:flex;"><span><span style="color:#75715e"># CREATE ANOTHER ONE len(x) == 3</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># APPEND number 3</span>
</span></span></code></pre></div><p><img src="https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3ocr9cx8k54sk2o6qetg.png" alt="digram"></p>
<p>imagine using something like that with the list that contains 100000 items, we will copy 100000 items in every append process</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># m = 100000</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">100</span>):
</span></span><span style="display:flex;"><span>    m<span style="color:#f92672">.</span>append(i)
</span></span></code></pre></div><h3 id="alternatives">Alternatives</h3>
<h4 id="tuples">Tuples</h4>
<p>Tuples are immutable so it has a fixed size, Also it&rsquo;s allow duplicates and Ordered</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> <span style="color:#f92672">%</span>time l <span style="color:#f92672">=</span> [<span style="color:#ae81ff">0</span>,<span style="color:#ae81ff">1</span>,<span style="color:#ae81ff">2</span>,<span style="color:#ae81ff">3</span>,<span style="color:#ae81ff">4</span>,<span style="color:#ae81ff">5</span>,<span style="color:#ae81ff">6</span>,<span style="color:#ae81ff">7</span>,<span style="color:#ae81ff">8</span>,<span style="color:#ae81ff">9</span>]
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">1000000</span> loops, best of <span style="color:#ae81ff">3</span>: <span style="color:#ae81ff">285</span> ns per loop
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> <span style="color:#f92672">%</span>timeit t <span style="color:#f92672">=</span> (<span style="color:#ae81ff">0</span>,<span style="color:#ae81ff">1</span>,<span style="color:#ae81ff">2</span>,<span style="color:#ae81ff">3</span>,<span style="color:#ae81ff">4</span>,<span style="color:#ae81ff">5</span>,<span style="color:#ae81ff">6</span>,<span style="color:#ae81ff">7</span>,<span style="color:#ae81ff">8</span>,<span style="color:#ae81ff">9</span>)
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">10000000</span> loops, best of <span style="color:#ae81ff">3</span>: <span style="color:#ae81ff">55.7</span> ns per loop
</span></span></code></pre></div><h4 id="sets">Sets</h4>
<p>Sets like Tuples but Unordered and Unchangeable it doesn&rsquo;t allow the duplicates items</p>
<p>let&rsquo;s take this example code</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">list_unique_names</span>(phonebook):
</span></span><span style="display:flex;"><span>    unique_names <span style="color:#f92672">=</span> []
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> name, phonenumber <span style="color:#f92672">in</span> phonebook: <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>        first_name, last_name <span style="color:#f92672">=</span> name<span style="color:#f92672">.</span>split(<span style="color:#e6db74">&#34; &#34;</span>, <span style="color:#ae81ff">1</span>)
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">for</span> unique <span style="color:#f92672">in</span> unique_names: 
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">if</span> unique <span style="color:#f92672">==</span> first_name:
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">break</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">else</span>:
</span></span><span style="display:flex;"><span>            unique_names<span style="color:#f92672">.</span>append(first_name)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> len(unique_names)
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">set_unique_names</span>(phonebook):
</span></span><span style="display:flex;"><span>    unique_names <span style="color:#f92672">=</span> set()
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> name, phonenumber <span style="color:#f92672">in</span> phonebook: 
</span></span><span style="display:flex;"><span>        first_name, last_name <span style="color:#f92672">=</span> name<span style="color:#f92672">.</span>split(<span style="color:#e6db74">&#34; &#34;</span>, <span style="color:#ae81ff">1</span>)
</span></span><span style="display:flex;"><span>        unique_names<span style="color:#f92672">.</span>add(first_name) 
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> len(unique_names)
</span></span><span style="display:flex;"><span>phonebook <span style="color:#f92672">=</span> [
</span></span><span style="display:flex;"><span>    (<span style="color:#e6db74">&#34;John Doe&#34;</span>, <span style="color:#e6db74">&#34;555-555-5555&#34;</span>),
</span></span><span style="display:flex;"><span>    (<span style="color:#e6db74">&#34;Albert Einstein&#34;</span>, <span style="color:#e6db74">&#34;212-555-5555&#34;</span>),
</span></span><span style="display:flex;"><span>    (<span style="color:#e6db74">&#34;John Murphey&#34;</span>, <span style="color:#e6db74">&#34;202-555-5555&#34;</span>),
</span></span><span style="display:flex;"><span>    (<span style="color:#e6db74">&#34;Albert Rutherford&#34;</span>, <span style="color:#e6db74">&#34;647-555-5555&#34;</span>),
</span></span><span style="display:flex;"><span>    (<span style="color:#e6db74">&#34;Guido van Rossum&#34;</span>, <span style="color:#e6db74">&#34;301-555-5555&#34;</span>),
</span></span><span style="display:flex;"><span>]
</span></span><span style="display:flex;"><span>print(<span style="color:#e6db74">&#34;Number of unique names from set method:&#34;</span>, set_unique_names(phonebook))
</span></span><span style="display:flex;"><span>print(<span style="color:#e6db74">&#34;Number of unique names from list method:&#34;</span>, list_unique_names(phonebook))
</span></span></code></pre></div><p>we have two functions here, One used list, the other sets
and after calling them this the performance report</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> <span style="color:#f92672">%</span>timeit list_unique_names(large_phonebook)
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">1</span> loops, best of <span style="color:#ae81ff">3</span>: <span style="color:#ae81ff">2.56</span> s per loop
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> <span style="color:#f92672">%</span>timeit set_unique_names(large_phonebook)
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">100</span> loops, best of <span style="color:#ae81ff">3</span>: <span style="color:#ae81ff">9.57</span> ms per loop
</span></span></code></pre></div><h4 id="numpy-arrays">Numpy Arrays</h4>
<p>numpy arrays are almost certainly a better choice if you are doing anything heavily nu‐
meric, as you get more datatype options and many specialized and fast functions. You
might choose to avoid numpy if you want fewer dependencies for your project, though
Cython and Pythran work equally well with array and numpy arrays; Numba works with
numpy arrays only</p>
<h2 id="references">References</h2>
<ul>
<li><a href="https://www.amazon.com/High-Performance-Python-Performant-Programming/dp/1449361595">https://www.amazon.com/High-Performance-Python-Performant-Programming/dp/1449361595</a></li>
<li><a href="https://www.analyticsvidhya.com/blog/2021/05/why-you-should-avoid-using-python-lists/#h2_3">https://www.analyticsvidhya.com/blog/2021/05/why-you-should-avoid-using-python-lists/#h2_3</a></li>
</ul>
<p>thanks for reading
bye :D</p>
<p><img src="https://media.giphy.com/media/m9eG1qVjvN56H0MXt8/giphy.gif" alt="BYE"></p>
]]></content></item><item><title>the best way to configure your dwm</title><link>https://www.knas.me/posts/the-best-way-to-configure-your-dwm/</link><pubDate>Tue, 16 Feb 2021 00:00:00 +0000</pubDate><guid>https://www.knas.me/posts/the-best-way-to-configure-your-dwm/</guid><description>hello everyone, dwm is the best window manager you can use it&amp;rsquo;s fast and minimalism and this the best thing i love of suckless philosophy , in this post i&amp;rsquo;ll show you how to configure your dwm, we will configure keybinds &amp;amp; color schema &amp;amp; some tasks can help you for make an awesome WM for configure your dwm (or any suckless programs) you need to change somethings in config.h</description><content type="html"><![CDATA[<p>hello everyone, dwm is the best window manager you can use it&rsquo;s fast and minimalism and this the best thing i love of <a href="https://suckless.org/philosophy/">suckless philosophy</a> , in this post i&rsquo;ll show you how to configure your dwm, we will configure keybinds &amp; color schema &amp; some tasks can help you for make an awesome WM
for configure your dwm (or any suckless programs) you need to change somethings in <strong>config.h</strong></p>
<p>first let&rsquo;s start with keybinds, dwm works with <strong>ALT</strong> key if you wan&rsquo;t to change it from <strong>ALT</strong> to <strong>SUPER</strong> key, change <strong>config.h</strong> from <strong>#define MODKEY Mod1Mask</strong> to <strong>#define MODKEY Mod4Mask</strong> for add/remove keybinds for dwm go to <strong>keys</strong> list from <strong>config.h</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-C" data-lang="C"><span style="display:flex;"><span><span style="color:#66d9ef">static</span> Key keys[] <span style="color:#f92672">=</span> {
</span></span><span style="display:flex;"><span>	<span style="color:#75715e">/* modifier                     key        function        argument */</span>
</span></span><span style="display:flex;"><span>	{ MODKEY,                       XK_d,      spawn,          {.v <span style="color:#f92672">=</span> dmenucmd } },
</span></span><span style="display:flex;"><span>	{ MODKEY,	                XK_Return, spawn,          {.v <span style="color:#f92672">=</span> termcmd } },
</span></span><span style="display:flex;"><span>    ..... etc ....
</span></span><span style="display:flex;"><span>    ....
</span></span></code></pre></div><p>dwm default keys for kill programs is <strong>SUPER + c</strong> , i&rsquo;ll change it to <strong>q</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-C" data-lang="C"><span style="display:flex;"><span>keys[] <span style="color:#f92672">=</span>
</span></span><span style="display:flex;"><span>... 
</span></span><span style="display:flex;"><span>..
</span></span><span style="display:flex;"><span><span style="color:#f92672">+</span> { MODKEY,             		XK_q,      killclient,     {<span style="color:#ae81ff">0</span>} },
</span></span><span style="display:flex;"><span>...
</span></span></code></pre></div><p>if you wan&rsquo;t to add more keybinds add a varible with your command you wan&rsquo;t to run with your keybind for example i need to run <strong>$ pamixer &ndash;allow-boost -i 10</strong> for up the audio</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-C" data-lang="C"><span style="display:flex;"><span><span style="color:#66d9ef">static</span> <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>audioup[] <span style="color:#f92672">=</span> { <span style="color:#e6db74">&#34;pamixer --allow-boost -i 10&#34;</span>,NULL };
</span></span><span style="display:flex;"><span><span style="color:#75715e">// EXAMPLE
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>{ MODKEY,                       XK_{KEY},      spawn,          {.v <span style="color:#f92672">=</span> {COMMAND} } }
</span></span><span style="display:flex;"><span><span style="color:#75715e">// REAL
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>{ MODKEY, 			XK_p,	   spawn,	   {.v <span style="color:#f92672">=</span> audioup}},
</span></span><span style="display:flex;"><span><span style="color:#75715e">// SUPER + p = audioup command
</span></span></span></code></pre></div><p>take the idea and make your own keybinds or if you hate to configure your keybind from <strong>C</strong> code you can use <a href="https://github.com/baskerville/sxhkd">sxhkd</a> with simple config file :)</p>
<hr>
<p>for change the terminal from <a href="https://st.suckless.org/">ST</a> to your fav terminal go to <strong>config.h</strong> and search for <strong>termcmd[]</strong> and change the value from <strong>st</strong> to <strong>terminator</strong> for example</p>
<hr>
<p>for change the font of dwm go to your <strong>config.h</strong> file and search for <strong>fonts[]</strong> and change the value to your fav font name &amp; size for example</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-C" data-lang="C"><span style="display:flex;"><span><span style="color:#66d9ef">static</span> <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>fonts[]          <span style="color:#f92672">=</span> { <span style="color:#e6db74">&#34;monospace:size=13&#34;</span> };
</span></span></code></pre></div><p>for change your colorschema search for <strong>static const char col_gray</strong> and change what you wan&rsquo;t with color picker, or you can use <a href="https://github.com/dylanaraps/pywal">Pywal</a> to generate colorschema with your wallpaper
<strong>$ wal -i wallpaper.png</strong>
and add this line <strong>#include &ldquo;/home/${your username}/.cache/wal/colors-wal-dwm.h&rdquo;</strong> for your <strong>config.h</strong> and remove this lines from <strong>config.h</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-C" data-lang="C"><span style="display:flex;"><span><span style="color:#66d9ef">static</span> <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>colors[][<span style="color:#ae81ff">3</span>]      <span style="color:#f92672">=</span> {
</span></span><span style="display:flex;"><span>	<span style="color:#75715e">/*               fg         bg         border   */</span>
</span></span><span style="display:flex;"><span>	[SchemeNorm] <span style="color:#f92672">=</span> { col_gray3, col_gray1, col_gray2 },
</span></span><span style="display:flex;"><span>	[SchemeSel]  <span style="color:#f92672">=</span> { col_gray4, col_cyan,  col_cyan  },
</span></span><span style="display:flex;"><span>};
</span></span></code></pre></div><p>and remove <strong>[SchemeUrg] =  { urg_fg,      urg_bg,    urg_border },</strong> from <strong>~/.cache/wal/colors-wal-dwm.h</strong>, now your colorschema will generate with your wallpaper.png
<img src="https://dev-to-uploads.s3.amazonaws.com/uploads/articles/00v4lspvuf1y5184na7r.png" alt="Alt Text">
if you want to add auto start function for your dwm you can use <a href="https://dwm.suckless.org/patches/cool_autostart/">cool autostart</a> patch , after patch with <strong>$ git apply cool-autostart.diff</strong> you need to add this line for <strong>config.h</strong> with your commands</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-C" data-lang="C"><span style="display:flex;"><span><span style="color:#66d9ef">static</span> <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span><span style="color:#66d9ef">const</span> autostart[] <span style="color:#f92672">=</span> {
</span></span><span style="display:flex;"><span>	<span style="color:#e6db74">&#34;compton&#34;</span>, NULL,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;sxhkd&#34;</span>,NULL,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;wal -R&#34;</span>,NULL,
</span></span><span style="display:flex;"><span>	NULL
</span></span><span style="display:flex;"><span>};
</span></span></code></pre></div><p>after that run <strong>$ sudo make clean install</strong> and enjoy :)</p>
]]></content></item><item><title>SQL inection on gdclive.nokia.com</title><link>https://www.knas.me/posts/sql-inection-on-gdclive.nokia.com/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.knas.me/posts/sql-inection-on-gdclive.nokia.com/</guid><description>Hi, this blog about SQL Injection in Nokia.com Allowed me to Dump all database
Full POC : when I&amp;rsquo;m visiting this domain gdclive.nokia.com I&amp;rsquo;ve found something
First: this domain has been used an old version of Joomla CMS
let&amp;rsquo;s scan it using the joomscan tool for dumping all pieces of information about Joomla (plugins, version, etc..)
All results :
Joomla Version: 3.1 Plugins: JCK Editor (6.4.4) searching for JCK Editor in exploit-db.</description><content type="html"><![CDATA[<p>Hi, this blog about SQL Injection in Nokia.com Allowed me to Dump all database</p>
<h3 id="full-poc-">Full POC :</h3>
<p>when I&rsquo;m visiting this domain gdclive.nokia.com I&rsquo;ve found something</p>
<p>First: this domain has been used an old version of Joomla CMS</p>
<p>let&rsquo;s scan it using the joomscan tool for dumping all pieces of information about Joomla (plugins, version, etc..)</p>
<p>All results :</p>
<pre tabindex="0"><code>Joomla Version: 3.1
Plugins: JCK Editor (6.4.4)
</code></pre><p>searching for JCK Editor in exploit-db.com
and I&rsquo;ve found this exploit <a href="https://www.exploit-db.com/exploits/45423">https://www.exploit-db.com/exploits/45423</a>
let&rsquo;s exploit it :D</p>
<!-- raw HTML omitted -->
<p>Worked ..!
you can see the version of the database :D</p>
<p>this is the time of SQLMAP Tool</p>
<!-- raw HTML omitted -->
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>$ sqlmap -u <span style="color:#e6db74">&#39;https://gdclive.nokia.com/plugins/editors/jckeditor/plugins/jtreelink/dialogs/links.php?extension=menu&amp;view=menu&amp;parent=&#39;</span> --level<span style="color:#f92672">=</span><span style="color:#ae81ff">5</span> --risk<span style="color:#f92672">=</span><span style="color:#ae81ff">3</span> --random-agent --technique<span style="color:#f92672">=</span>U -p parent --batch --current-db --current-user
</span></span></code></pre></div><!-- raw HTML omitted -->
<p>you can see the current user and the name of the database :)
After dumping all databases using the <code>--all</code> option and unencrypt the password of the admin account let&rsquo;s login in admin panel</p>
<!-- raw HTML omitted -->
<p>You can see this <!-- raw HTML omitted -->video<!-- raw HTML omitted --> about this bug</p>
<!-- raw HTML omitted -->
<p>Thanks ;0</p>
]]></content></item></channel></rss>